import torch
print(torch.__version__)
%pip install pytorch==1.6
%pip install -U sentence-transformers




import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sentence_transformers import SentenceTransformer, util


# Output: train and test x and y as single-column dataframes
def get_data(seed=0):
    data_path = 'enron.csv'
    # id | label | text | label_num # 0 == ham, 1 == spam
    raw_data_df = pd.read_csv(data_path)[['text', 'label_num']]

    x_train, x_test, y_train, y_test = train_test_split(
        raw_data_df['text'], 
        raw_data_df['label_num'], 
        test_size = 0.2, 
        random_state=seed
    )
    return x_train, x_test, y_train, y_test

# Engineer tfidf features from raw data
# Input: vectorizer, single-column df (series)
# Output: dataframe of TFIDF features trained on df
def get_tfidf_vectorizer(df):
    from sklearn.feature_extraction.text import TfidfVectorizer
    vectorizer = TfidfVectorizer(use_idf=True,ngram_range=(1,1))
    tfidf_features = vectorizer.fit_transform(df)
    return vectorizer

def get_logistic_classifier(x_features, y_train):
    from sklearn.linear_model import LogisticRegression
    clf = LogisticRegression()
    clf.fit(x_features, y_train)    
    return clf

    

def get_bert_vectorizer():
    model = SentenceTransformer('msmarco-distilroberta-base-v2')
    return model

def train_fold(seed=0):
    # data
    x_train, x_test, y_train, y_test = get_data(seed)
    
    # training
    ## tfidf
    tfidf_vectorizer = get_tfidf_vectorizer(x_train)
    x_train_tfidf_features = tfidf_vectorizer.transform(x_train)
    logistic_tfidf_clf = get_logistic_classifier(x_train_tfidf_features, y_train)
    ## bert

    
    # testing
    x_test_tfidf_features = tfidf_vectorizer.transform(x_test)
    score = logistic_tfidf_clf.score(x_test_tfidf_features, y_test)
    return score

def main():
    folds = 5
    for i in range(folds):
        print(train_fold(i))
        
def _bert_helper(text):
    return bert_vectorizer.encode(text, show_progress_bar=False)
        
def test():
    
    x_train, x_test, y_train, y_test = get_data()
    bert_vectorizer = get_bert_vectorizer()
    x_train_bert_features = x_train.iloc[0:4].apply(bert_vectorizer.encode, show_progress_bar=True)
    
    print(x_train_bert_features)
    
test()